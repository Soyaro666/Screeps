var roleCollection = require('roleCollection');
var taskRespawn = require('task.respawn');

module.exports.loop = function () {
	
	for(var name in Game.rooms) {
        console.log('Room "'+name+'" has '+Game.rooms[name].energyAvailable+' of '+Game.rooms[name].energyCapacityAvailable+' energy');
		
		//gathering existing Creeps
		var localCreeps = Game.rooms[name].find(FIND_MY_CREEPS);
		var attackers = _.filter(localCreeps, (creep) => creep.memory.role == 'attacker');
		var upgraders = _.filter(localCreeps, (creep) => creep.memory.role == 'upgrader');
		var chargers = _.filter(localCreeps, (creep) => creep.memory.role == 'charger');
		var builders = _.filter(localCreeps, (creep) => creep.memory.role == 'builder');
		var localSpawns = Game.rooms[name].find(FIND_MY_SPAWNS);
		var spawn = localSpawns[0].name;
		
		var roomLevel = Game.rooms[name].controller.level;
		for(var builds in Game.rooms[name].structures) {
			/*var maxAttackers = Game.structures[builds].room.find(FIND_MY_STRUCTURES, {
				filter: (structure) => {
					return (structure.structureType == STRUCTURE_EXTENSION ||
							structure.structureType == STRUCTURE_SPAWN ||
							structure.structureType == STRUCTURE_TOWER);
				}
			}).length;*/
			if(Game.structures[name].structureType == STRUCTURE_TOWER) {
				var tower = Game.structures[name];
			}
			if(tower) {
				var closestHostile = tower.pos.findClosestByRange(FIND_HOSTILE_CREEPS);
				var closestDamagedStructure = tower.pos.findClosestByRange(FIND_MY_STRUCTURES, {
					filter: (structure) => structure.hits < structure.hitsMax
				});
				if(closestHostile) {
					tower.attack(closestHostile);
				} else if(closestDamagedStructure) {
					tower.repair(closestDamagedStructure);
				}
				var tower = false;
			}
		}
		console.log('Attackers: '+attackers.length+', Chargers: '+chargers.length+', Upgraders: '+upgraders.length+', Builders: '+builders.length);
		
		var newTask = false;
		if(chargers.length < 1) {
			newTask = 'charger';
		} else if(upgraders.length < 1) {
			newTask = 'upgrader';
		} else if(builders.length < 1) {
			newTask = 'builder';
		} else if(attackers.length < roomLevel) {
			newTask = 'attacker';
		}
		
		if(newTask) {
			taskRespawn.run(newTask, spawn, Game.rooms[name].energyCapacityAvailable);
			newTask = false;
		}
		
		if(Game.spawns[spawn].spawning) { 
			var spawningCreep = Game.creeps[Game.spawns[spawn].spawning.name];
			Game.spawns[spawn].room.visual.text(
				'🛠️' + spawningCreep.memory.role,
				Game.spawns[spawn].pos.x + 1, 
				Game.spawns[spawn].pos.y, 
				{align: 'left', opacity: 0.8});
		}
		
		
		var extenders = Game.rooms[name].find(FIND_MY_STRUCTURES, {
			filter: (structure) => {
				return (structure.structureType == STRUCTURE_EXTENSION);
			}
		});
		var maxExtenders = roomLevel * 5 - 5;
		var towers = Game.rooms[name].find(FIND_MY_STRUCTURES, {
			filter: (structure) => {
				return (structure.structureType == STRUCTURE_TOWER);
			}
		});
		
		var rng1 = Math.random() * 10 - 5;
		var rng2 = Math.random() * 10 - 5;
		
		var terrain = Game.map.getRoomTerrain(Game.spawns[spawn].room.name);

		if(spawn) {
			var constructionSites = Game.spawns[spawn].room.find(FIND_CONSTRUCTION_SITES);
			if(!Game.spawns[spawn].memory.lastbuild || Game.spawns[spawn].memory.lastbuild < Game.time) {
				var sources = Game.spawns[spawn].room.find(FIND_SOURCES);
				var newLength = sources.unshift(Game.spawns[spawn]);
				var newLength = sources.push(Game.rooms[name].controller);
				for(var i in towers) {
					var newLength = sources.push(towers[i]);
				}
				for(var i in extenders) {
					var newLength = sources.push(extenders[i]);
				}

				for(var poi in sources) {
					for(var roadx = 0; roadx < 3; roadx++) {
						for(var roady = 0; roady < 3; roady++) {
							if(!(roadx == 1 && roady == 1)) {
								var buildx = sources[poi].pos.x - 1 + roadx;
								var buildy = sources[poi].pos.y - 1 + roady;
								if(terrain.get(buildx, buildy) == 0 || terrain.get(buildx, buildy) == 2) {
									Game.spawns[spawn].room.createConstructionSite(buildx, buildy, STRUCTURE_ROAD);
									Game.spawns[spawn].memory.lastbuild = Game.time + 500;
								}
							}
						}
					}
				}
				var first = sources.shift();
				for(var dest in sources) {
					var newStreet = Game.spawns[spawn].pos.findPathTo(sources[dest], {ignoreCreeps:true});
					var last = newStreet.pop();
					for(var road in newStreet) {
						if(road < newStreet.length) {
							Game.spawns[spawn].room.createConstructionSite(newStreet[road].x, newStreet[road].y, STRUCTURE_ROAD);
						}
					}
					Game.spawns[spawn].memory.lastbuild = Game.time + 100;
					
				}
			}
		}
		if(roomLevel > 1 && extenders.length < maxExtenders && constructionSites.length < 1) {
			if(Game.spawns[spawn].room.createConstructionSite(Game.spawns[spawn].pos.x+rng1, Game.spawns[spawn].pos.y+rng2, STRUCTURE_EXTENSION) == 0) {
				console.log('new Extension');
			}
		}
		if(roomLevel > 2 && towers.length < 1 && constructionSites.length < 1) {
			var rng1 = rng1 / 2;
			var rng2 = rng2 / 2;
			if(Game.spawns[spawn].room.createConstructionSite(Game.spawns[spawn].pos.x+rng1, Game.spawns[spawn].pos.y+rng2, STRUCTURE_TOWER) == 0) {
				console.log('new Tower');
			}
		}
	}
	
	for(var name in Memory.creeps) {
        if(!Game.creeps[name]) {
            delete Memory.creeps[name];
            console.log('Clearing non-existing creep memory:', name);
        }
    }

    for(var name in Game.creeps) {
        var creep = Game.creeps[name];
		roleCollection.run(creep);
    }
}