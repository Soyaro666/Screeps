var taskRespawn = require('task.respawn');

var buildArray = function(origin, path, structure = STRUCTURE_ROAD, interval = 1) {
	var terrain = Game.map.getRoomTerrain(origin.room.name);
	for(var road = 0; road < path.length; road = road + interval) {
		var buildx = path[road].x;
		var buildy = path[road].y;
		if(terrain.get(buildx, buildy) == 0 || terrain.get(buildx, buildy) == 2) {
			origin.room.createConstructionSite(buildx, buildy, structure);
		}
	}
}

var surround = function(target, construction = STRUCTURE_ROAD, radius = 1, interval = 1) {
	var diameter = radius * 2;
	var terrain = Game.map.getRoomTerrain(target.room.name);
	for(var constx = 0; constx <= diameter; constx = constx + interval) {
		for(var consty = 0; consty <= diameter; consty = consty + interval) {
			if(!(constx == radius && consty == radius)) {
				var buildx = target.pos.x - radius + constx;
				var buildy = target.pos.y - radius + consty;
				if(terrain.get(buildx, buildy) == 0 || terrain.get(buildx, buildy) == 2) {
					target.room.createConstructionSite(buildx, buildy, construction);
				}
			}
		}
	}
};

var spawnCollection = {
	
    /** @param {Creep} creep **/
	run: function(name, spawn) {
		//gathering existing Creeps
		var localCreeps = Game.rooms[name].find(FIND_MY_CREEPS);
		var attackers = _.filter(localCreeps, (creep) => creep.memory.role == 'attacker');
		var upgraders = _.filter(localCreeps, (creep) => creep.memory.role == 'upgrader');
		var chargers = _.filter(localCreeps, (creep) => creep.memory.role == 'charger');
		var builders = _.filter(localCreeps, (creep) => creep.memory.role == 'builder');
		var explorers = _.filter(localCreeps, (creep) => creep.memory.role == 'explorer');
		var roomLevel = Game.rooms[name].controller.level;
		
		console.log('Room "'+name+'" has '+Game.rooms[name].energyAvailable+' of '+Game.rooms[name].energyCapacityAvailable+' energy, '+attackers.length+' Attackers, '+builders.length+' Builders, '+chargers.length+' Chargers, '+upgraders.length+' Upgraders');
		
		var newTask = false;
		if(chargers.length < 1) {
			newTask = 'charger';
		} else if(upgraders.length < 1) {
			newTask = 'upgrader';
		} else if(builders.length < 1) {
			newTask = 'builder';
		} else if(attackers.length < roomLevel) {
			newTask = 'attacker';
		}
		
		if(newTask) {
			taskRespawn.run(newTask, spawn, Game.rooms[name].energyCapacityAvailable);
			newTask = false;
		}
		
		if(Game.spawns[spawn].spawning) { 
			var spawningCreep = Game.creeps[Game.spawns[spawn].spawning.name];
			Game.spawns[spawn].room.visual.text(
				'🛠️' + spawningCreep.memory.role,
				Game.spawns[spawn].pos.x + 1, 
				Game.spawns[spawn].pos.y, 
				{align: 'left', opacity: 0.8});
		}
		
		
		var extenders = Game.rooms[name].find(FIND_MY_STRUCTURES, {
			filter: (structure) => {
				return (structure.structureType == STRUCTURE_EXTENSION);
			}
		});
		var towers = Game.rooms[name].find(FIND_MY_STRUCTURES, {
			filter: (structure) => {
				return (structure.structureType == STRUCTURE_TOWER);
			}
		});
		var minerals = Game.rooms[name].find(FIND_MINERALS);
		
		var terrain = Game.map.getRoomTerrain(Game.spawns[spawn].room.name);
		var constructionSites = Game.spawns[spawn].room.find(FIND_CONSTRUCTION_SITES);
		var buildDelay = 200;
		var tempDelay = 0;

		if(!(Game.spawns[spawn].memory.lastbuild) || Game.spawns[spawn].memory.lastbuild < Game.time) {
			var chargeSource = Game.rooms[name].controller.pos.findClosestByPath(FIND_SOURCES);
			var newStreet = Game.rooms[name].controller.pos.findPathTo(chargeSource, {ignoreCreeps:true});
			var last = newStreet.pop();
			buildArray(Game.rooms[name].controller, newStreet);
			var sources = Game.spawns[spawn].room.find(FIND_SOURCES);
			var sources = sources.concat(towers, extenders, minerals);
			var newLength = sources.push(Game.rooms[name].controller);
			
			for(var dest in sources) {
				var newStreet = Game.spawns[spawn].pos.findPathTo(sources[dest], {ignoreCreeps:true});
				var last = newStreet.pop();
				buildArray(Game.spawns[spawn], newStreet);
				tempDelay++;
				
			}
			var sources = Game.rooms[name].find(FIND_MY_SPAWNS);
			var sources = sources.concat(towers, extenders, minerals);
			for(var dest in sources) {
				surround(sources[dest]);
			}
			
			var sources = Game.spawns[spawn].room.find(FIND_SOURCES);
			for(var dest in sources) {
				surround(sources[dest], STRUCTURE_ROAD, 2);
			}
		}
		var maxExtenders = roomLevel * 5 - 5;
		if(roomLevel > 1 && extenders.length < maxExtenders && constructionSites.length < 1) {
			var sources = Game.spawns[spawn].room.find(FIND_SOURCES);
			var sources = sources.concat(minerals);
			
			var lane = roomLevel;
			while(sources.length <= lane) {
				lane = lane - sources.length;
			}
			var newStreet = Game.spawns[spawn].pos.findPathTo(sources[lane], {ignoreCreeps:true});
			var last = newStreet.pop();
			var last = newStreet.pop();
			buildArray(Game.spawns[spawn], newStreet, STRUCTURE_EXTENSION, 2);
			tempDelay++;
		}
		var maxTowers = Math.round((roomLevel / 2) - 1);
		if(towers.length < maxTowers && constructionSites.length < 1) {
			var dest = Game.rooms[name].controller;
			var newStreet = Game.spawns[spawn].pos.findPathTo(dest, {ignoreCreeps:true});
			var last = newStreet.pop();
			var last = newStreet.pop();
			buildArray(Game.spawns[spawn], newStreet, STRUCTURE_TOWER, 2);
			tempDelay++;
		}
		
		if(tempDelay > 0) {
			Game.spawns[spawn].memory.lastbuild = Game.time + buildDelay;
			console.log('set spawnDelay');
		}
	}
};

module.exports = spawnCollection;